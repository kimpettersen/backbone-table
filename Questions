- The code is well structured
- He read the Backbone documentation
- He has stored the data in the view, it should be in the model. For example (this.allAttrs = ['a', 'b', 'c', 'd', 'e', 'f'];
)
'''
Discovered static values for a backbone model, put allAttrs and the ajax data as static methods in the model.
A bit confused about the temporary storage of the values in range filter. Stored it in the collection instead of the view.
Something about this doesn't feel right.
That being said, I understand that non of this should be in the view to make sure the models are reusable.
'''

- Some things were a bit complex when they didn't need to be. For example, using a prototype function to get the data (line 18 view.js) and collection.js line 43 - 76
'''
Using the serializer was just me being lazy. Changed.
'''


- He is triggering an event when something happens. Backbone handles changes in the model. If we add a model, backbone triggers an 'add' event. If we change model attributes it triggers a 'change' event.
'''
Didn't think about this. Changed to take advantage of it.
There's still a couple of things that are a bit confusing. When a custom event isn't enough. When you perform an UI event(range filter) I trigger a custom event on the view. Should I trigger an event on the collection instead?

It is technically a change in the collection(at least the way I did it). And all other events are on the collection. There might be cases where other components need to know about such an update.
It seems to only work when I trigger it in the view though.
'''

- He is removing elements from the DOM when he could remove from the model. Use model.destroy for this.
'''
Do you mean collection.remove instead of model.destroy?
'''
- The collation.comparator is great

############################################################################################################################

My questions:

1. rangeFilter in view.js:
The range filter, what is the best way to do this without loosing the state(listeners). This seems wrong

2. enableEdit in view.js
I don't like this, is there a better way?

3. How will collections and models work together in a larger application? Could a collection have several models? Different models?

3. What about inheritance/polymorphism, is that a common thing to use in a system like this.

4. Unit-testing backbone. Seems pretty easy with backbone











